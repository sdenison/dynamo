@using Dynamo.Business.Shared.AdventOfCode.Compute.Cpu

<div class="d-flex">
    <!-- Play, Step, and Reset Buttons on the Left -->
    <div class="me-auto">
        <button class="btn btn-primary me-2" @onclick="RunInstructions">
            <Icon Name="IconName.FastForward" /> Run
        </button>
        <button class="btn btn-primary me-2" @onclick="Step">
            <Icon Name="IconName.PlayBtn" /> Step
        </button>
        <button class="btn btn-secondary" @onclick="ResetRegisters">
            <Icon Name="IconName.Repeat" /> Reset Registers
        </button>
    </div>

    <!-- Register Values on the Right -->
    <div class="d-flex justify-content-end">
        <div class="card me-2">
            <div class="card-body">
                <h5 class="card-title">Registers and their Values</h5>
                @foreach (var register in Processor.Registers)
                {
                    <p class="card-text">@register.Key: @register.Value</p>
                }
            </div>
        </div>

        <!-- Displaying Instructions with Highlight -->
        <div class="card">
            <div class="card-body">
                <h5 class="card-title">Instructions</h5>
                @foreach (var instruction in Processor.Instructions)
                {
                    <p class="card-text" style="@GetInstructionStyle(instruction)">
                        @instruction.InstructionString
                    </p>
                }
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public Processor Processor { get; set; }


    protected override void OnInitialized()
    {
        // Only initialize the Processor if it's not already set by the parent
        if (Processor == null)
        {
            // Example initialization of a new Processor with dummy instructions
            string[] instructions = new string[]
            {
                "b inc 5 if a > 1",
                "a inc 1 if b < 5",
                "c dec -10 if a >= 1",
                "c inc -20 if c == 10"
            };
            Processor = new Processor(instructions);
        }
    }

    private void RunInstructions()
    {
        Processor.RunInstructions();
    }

    private void Step()
    {
        Processor.RunNextInstruction();
    }

    // Method to reset the registers
    private void ResetRegisters()
    {
        Processor.ResetRegisters();
        Processor.ProgramIsRunning = false;
        Processor.InstructionPointer = 0;
    }

    // Method to conditionally style the next instruction
    private string GetInstructionStyle(Instruction instruction)
    {
        if (Processor.ProgramIsRunning)
        {
            var index = Processor.Instructions.IndexOf(instruction);
            if (index == Processor.InstructionPointer)
            {
                return "background-color: #ffffcc;"; // Highlight the next instruction with Visual Studio yellow
            }
        }
        return "";
    }
}
