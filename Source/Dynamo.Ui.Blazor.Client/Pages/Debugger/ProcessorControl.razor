@using Dynamo.Business.Shared.AdventOfCode.Compute.Cpu

<div class="d-flex">
    <!-- Play, Step, and Reset Buttons on the Left -->
    <div class="me-auto">
        <button class="btn btn-primary me-2" @onclick="RunInstructions">
            <Icon Name="IconName.FastForward" /> Run
        </button>
        <button class="btn btn-primary me-2" @onclick="Step">
            <Icon Name="IconName.PlayBtn" /> Step
        </button>
        <button class="btn btn-secondary" @onclick="Reset">
            <Icon Name="IconName.Repeat" /> Reset
        </button>
    </div>
</div>

<div class="d-flex">
    <!-- Instructions Card (Pulled to the Left) -->
    <div class="card me-3" style="flex-basis: 50%; max-width: 50%;">
        <div class="card-body">
            <h5 class="card-title">Instructions</h5>
            @foreach (var instruction in Processor.Instructions)
            {
                <div class="d-flex align-items-center">
                    <!-- Gutter for Breakpoints -->
                    <div class="gutter me-2" style="width: 20px; cursor: pointer;" @onclick="() => ToggleBreakpoint(instruction)">
                        @if (instruction.IsBreakpoint)
                        {
                            <Icon Name="IconName.StopCircle" /> <!-- Show an icon or dot for breakpoint -->
                        }
                        else
                        {
                            <Icon Name="IconName.Circle" /> <!-- Empty circle or other icon -->
                        }
                    </div>

                    <!-- Instruction Text -->
                    <p class="card-text" style="@GetInstructionStyle(instruction)">
                        @instruction.InstructionString
                    </p>
                </div>
            }
        </div>
    </div>

    <!-- Registers Card (Independent Size) -->
    <div class="card" style="flex-basis: 50%; max-width: 50%;">
        <div class="card-body">
            <h5 class="card-title">Registers and their Values</h5>
            @foreach (var register in Processor.Registers.OrderBy(x => x.Key))
            {
                <p class="card-text">@register.Key: @register.Value</p>
            }
        </div>
    </div>
</div>

@code {
    [Parameter]
    public Processor Processor { get; set; }

    protected override void OnInitialized()
    {
        if (Processor == null)
        {
            string[] instructions = new string[]
            {
                "b inc 5 if a > 1",
                "a inc 1 if b < 5",
                "c dec -10 if a >= 1",
                "c inc -20 if c == 10"
            };
            Processor = new Processor(instructions);
        }
    }

    private void RunInstructions()
    {
        Processor.RunInstructions();
    }

    private void Step()
    {
        Processor.RunNextInstruction();
    }

    private void Reset()
    {
        Processor.ResetRegisters();
        Processor.ProgramIsRunning = false;
        Processor.InstructionPointer = 0;
    }

    private void ToggleBreakpoint(Instruction instruction)
    {
        instruction.IsBreakpoint = !instruction.IsBreakpoint;
    }

    private string GetInstructionStyle(Instruction instruction)
    {
        string style = "";

        if (Processor.ProgramIsRunning)
        {
            var index = Processor.Instructions.IndexOf(instruction);
            if (index == Processor.InstructionPointer)
            {
                style = "background-color: yellow;";
            }
        }

        if (instruction.IsBreakpoint)
        {
            style += " color: red;";
        }

        return style;
    }
}
