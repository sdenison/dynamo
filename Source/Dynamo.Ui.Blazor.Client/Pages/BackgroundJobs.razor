@page "/backgroundjobs"
@using System.Net.Http.Headers
@inject Csla.IDataPortal<Dynamo.Business.Utilities.BackgroundJobList> backgroundJobDataPortal
@inject Csla.Blazor.ViewModel<Dynamo.Business.Utilities.BackgroundJobList> vm
@inject HttpClient Http

<h1>Background Jobs</h1>

<Toasts class="p-3" Messages="_messages" Placement="ToastsPlacement.TopRight" />

<div class="mb-3">
    <label for="formFile" class="form-label">Upload a file</label>
    <InputFile class="form-control" OnChange="@OnInputFileChange"></InputFile> 
</div>

@if (vm.Model == null)
{
    <p>Loading...</p>
}
else
{
    <Button class="float-end" Color="ButtonColor.Primary" onclick="@RefreshGrid">Refresh</Button>
    <div class="grid">
       <div class="row">
           <Grid TItem="Business.Utilities.BackgroundJob" 
                 class="table table-hover table-bordered table-striped" 
                 Data="vm.Model"
                 Responsive="true"
                 AllowPaging="true"
                 PageSize="@pageSize">
               <GridColumn TItem="Business.Utilities.BackgroundJob" HeaderText="File Name" PropertyName="FileName">
                   @context.FileName
               </GridColumn>
               <GridColumn TItem="Business.Utilities.BackgroundJob" HeaderText="Job Status" PropertyName="JobStatus">
                   @context.JobStatus
               </GridColumn>
               <GridColumn TItem="Business.Utilities.BackgroundJob" HeaderText="Job Type" PropertyName="JobType">
                   @context.JobType
               </GridColumn>
               <GridColumn TItem="Business.Utilities.BackgroundJob" HeaderText="Created" PropertyName="Created">
                   @context.Created
               </GridColumn>
               <GridColumn TItem="Business.Utilities.BackgroundJob" HeaderText="Last Updated" PropertyName="LastUpdated">
                   @context.LastUpdated
               </GridColumn>
               <GridColumn TItem="Business.Utilities.BackgroundJob" HeaderText="Job Output" PropertyName="JobOutput">
                   @context.JobOutput
               </GridColumn>
           </Grid>
       </div>
    </div>
    <Button Type="ButtonType.Button" Color="ButtonColor.Primary" @onclick="() => ChangeSize(5)">Page Size 5</Button>
    <Button Type="ButtonType.Button" Color="ButtonColor.Secondary" @onclick="() => ChangeSize(10)">Page Size 10</Button>
    <Button Type="ButtonType.Button" Color="ButtonColor.Secondary" @onclick="() => ChangeSize(15)">Page Size 15</Button>

}

@code {
    List<ToastMessage> _messages = new List<ToastMessage>();
    private System.Timers.Timer _timer;
    private int pageSize = 5;

    private void ChangeSize(int size) => pageSize = size;

    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        long maxFileSize = 1024 * 15;
        var file = e.File;
        var fileContent = new StreamContent(file.OpenReadStream(maxFileSize));
        fileContent.Headers.ContentType = new MediaTypeHeaderValue(file.ContentType);
        using var content = new MultipartFormDataContent();
        content.Add(
           content: fileContent,
           name: "\"files\"",
           fileName: file.Name
        );
        var response = await Http.PostAsync("FileUpload", content);
        //var uploadResults = await response.Content.ReadFromJsonAsync();
        if (response.IsSuccessStatusCode)
        {
            await vm.RefreshAsync(() => backgroundJobDataPortal.FetchAsync());
            var message = new ToastMessage(ToastType.Success, $"File {file.Name} successfully uploaded...");
            message.AutoHide = true;
            _messages.Add(message);
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        await vm.RefreshAsync(() => backgroundJobDataPortal.FetchAsync());
    }

    protected async Task RefreshGrid()
    {
        await vm.RefreshAsync(() => backgroundJobDataPortal.FetchAsync());
    }
}
