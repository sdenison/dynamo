Description: This template creates one Dynamo web task definition

Parameters:
  EnvironmentName:
    Type: String
  TaskName:
    Type: String
  #Command is a comma separated list of strings. 
  Command:
    Type: String
  ExecutionRoleArn:
    Type: String
  Memory:
    Type: String
    Default: "512"
  Cpu:
    Type: String
    Default: "256"
  DesiredCount:
    Type: Number
    Default: 2
    Description: How many copies of the service task to run.    
  HealthCheckPath:
    Type: String
    Default: /
    Description: Path to perform the healthcheck on each instance.
  HealthCheckIntervalSeconds:
    Type: Number
    Default: 10 
    Description: Number of seconds to wait between each health check.
  ContainerPort:
    Type: Number
    Default: 80
    Description: The port number the application inside the docker container
      is binding to.    
  Path:
    Type: String
    Default: "*"
    Description: A path on the public load balancer that this service
      should be connected to.      

Resources:
  OneDynamoWebRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: !Sub "${EnvironmentName}-role-dynamo-${TaskName}"
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ecs-tasks.amazonaws.com
          Action:
          - "sts:AssumeRole"
      Policies:
      - PolicyName: !Sub "${EnvironmentName}-role-policy-${TaskName}"
        PolicyDocument:
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - ec2:CreateNetworkInterface
                - ec2:DeleteNetworkInterface
                - ec2:DescribeNetworkInterfaces
                - ssm:GetParameters
                - ssm:GetParameter
                - ssm:GetParametersByPath
                - secretsmanager:GetSecretValue
                - secretsmanager:DescribeSecret
                - s3:DeleteObject
                - s3:GetObject
                - s3:PutObject
                - s3:PutObjectAcl
                - s3:ListBucket
                - ses:SendEmail
                - sqs:GetQueueAttributes
                - sqs:SetQueueAttributes
                - sqs:ReceiveMessage
                - sqs:DeleteMessage
                - sqs:SendMessage
                - sqs:ListQueues
                - sqs:ListQueueTags
                - sqs:GetQueueUrl
                - sns:GetTopicAttributes
                - sns:Publish
                - sns:Subscribe
                - sns:CreateTopic
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
                - logs:DescribeLogGroups
                - logs:DescribeLogStreams
                - cloudwatch:PutMetricData
                  # Rules which allow ECS to attach network interfaces to instances
                  # on your behalf in order for awsvpc networking mode to work right
                - 'ec2:AttachNetworkInterface'
                - 'ec2:CreateNetworkInterface'
                - 'ec2:CreateNetworkInterfacePermission'
                - 'ec2:DeleteNetworkInterface'
                - 'ec2:DeleteNetworkInterfacePermission'
                - 'ec2:Describe*'
                - 'ec2:DetachNetworkInterface'
                # Rules which allow ECS to update load balancers on your behalf
                # with the information sabout how to send traffic to your containers
                - 'elasticloadbalancing:DeregisterInstancesFromLoadBalancer'
                - 'elasticloadbalancing:DeregisterTargets'
                - 'elasticloadbalancing:Describe*'
                - 'elasticloadbalancing:RegisterInstancesWithLoadBalancer'
                - 'elasticloadbalancing:RegisterTargets'                
              Resource: "*"

  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access to the public facing load balancer
      VpcId:
        Fn::ImportValue:
          !Sub ${EnvironmentName}-VPCId      
      SecurityGroupIngress:
        # Allow access to ALB from anywhere on the internet
        - CidrIp: 0.0.0.0/0
          IpProtocol: -1                    

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub ${EnvironmentName}-LoadBalancer
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup
      Subnets:
        - Fn::ImportValue: !Sub ${EnvironmentName}-PublicSubnet1
        - Fn::ImportValue: !Sub ${EnvironmentName}-PublicSubnet2      

  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Protocol: HTTP
      Port: 80
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Matcher:
        HttpCode: 200-299
      HealthCheckIntervalSeconds: !Ref 'HealthCheckIntervalSeconds'
      HealthCheckPath: !Ref 'HealthCheckPath'
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 10 
      TargetType: ip
      Name: !Sub ${EnvironmentName}-ecs-task-${TaskName}-tg
      Port: !Ref ContainerPort
      Protocol: HTT
      UnhealthyThresholdCount: 2
      TargetGroupAttributes:
        -
          Key: stickiness.enabled
          Value: true
      VpcId:
        Fn::ImportValue:
          !Sub ${EnvironmentName}-VPCId          

  ContainerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: 
        Fn::ImportValue:
          !Sub ${EnvironmentName}-VPCId
      GroupDescription: for ecs container
      SecurityGroupIngress:
        - SourceSecurityGroupId: !Ref 'LoadBalancerSecurityGroup'
          IpProtocol: -1

  OneTaskDefinitionLogGroup:
    Type: AWS::Logs::LogGroup
    UpdateReplacePolicy: Retain
    DeletionPolicy: Delete
    Properties:
      LogGroupName: !Sub /ecs/${EnvironmentName}-${TaskName}-task-log-group

  OneTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub ${EnvironmentName}-ecs-task-${TaskName}
      RequiresCompatibilities:
        - FARGATE
      NetworkMode: awsvpc
      ExecutionRoleArn: !Ref ExecutionRoleArn
      TaskRoleArn: !GetAtt OneDynamoWebRole.Arn
      Cpu: !Sub ${Cpu}
      Memory: !Sub ${Memory}
      ContainerDefinitions:
        - Name: !Sub ${EnvironmentName}-ecs-task-container-${TaskName}
          Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${EnvironmentName}-dynamo-repository:latest
          Command: !Split [",", !Ref Command]
          PortMappings:
            - ContainerPort: !Ref ContainerPort
              Protocol: tcp
          Environment:
            - Name: "ENVIRONMENT"
              Value: !Sub ${EnvironmentName}
            - Name: "AppSettings__EnvironmentName"
              Value: !Sub "${EnvironmentName}"
            - Name: "AppSettings__AWSRegion"
              Value: !Sub "${AWS::Region}"
          Essential: true
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Sub /ecs/${EnvironmentName}-${TaskName}-task-log-group
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs-task

  DynamoService:
    Type: AWS::ECS::Service
    DependsOn: LoadBalancerRule
    Properties:
      ServiceName: !Sub ${EnvironmentName}-ecs-task-${TaskName}-service
      Cluster: !Sub ${EnvironmentName}-dynamo-fargate-cluster
      LaunchType: FARGATE
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50
      DesiredCount: !Ref 'DesiredCount'
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED 
          SecurityGroups:
            - !Ref ContainerSecurityGroup
          Subnets:
            - Fn::ImportValue:
                !Sub ${EnvironmentName}-PublicSubnet1
            - Fn::ImportValue:
                !Sub ${EnvironmentName}-PublicSubnet2
      TaskDefinition: !Ref OneTaskDefinition
      # ServiceRegistries:
      #   - RegistryArn: !GetAtt DiscoveryService.Arn
      #     Port: 80 
      LoadBalancers:
        - ContainerName: !Sub ${EnvironmentName}-ecs-task-container-${TaskName}
          ContainerPort: !Ref ContainerPort
          TargetGroupArn: !Ref TargetGroup
          #LoadBalancerName: !Sub ${EnvironmentName}-ecs-service-${TaskName}

  LoadBalancerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - TargetGroupArn: !Ref TargetGroup
          Type: 'forward'
      Conditions:
        - Field: path-pattern
          Values:
            #This value was - /api/book* in the example. Maybe we can send traffic to different servers based on this path.
            - /*
      ListenerArn: !Ref LoadBalancerListener
      Priority: 2          


  LoadBalanacerDnsEntry:
    Type: AWS::Route53::RecordSet
    Properties:
      Name: test.dynamo.sdenisondemo.com
      HostedZoneName: sdenisondemo.com.
      Type: A
      AliasTarget:
        DNSName: !GetAtt LoadBalancer.DNSName
        HostedZoneId: !GetAtt LoadBalancer.CanonicalHostedZoneID

Outputs:
  Listener:
    Description: listener port 80
    Value: !Ref LoadBalancerListener
    Export:
      Name: !Sub ${EnvironmentName}-Listener     

  ContainerSecurityGroiup:
    Description: continer security group
    Value: !Ref ContainerSecurityGroup
    Export:
      Name: !Sub ${EnvironmentName}-ContainerSecurityGroup    

  LoadBalancerDNS:
    Description: Domain name for the load balancer
    Value: LoadBalancer.DNSName
    Export:
      Name: !Sub ${EnvironmentName}-LoadBalancerDns