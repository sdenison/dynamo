Description:
  This template deploys the CMS CodeDeploy configuration.
  Dependant Stacks - S3, Compute

Parameters:
  EnvironmentName:
    Type: String
  ApplicationName:
    Type: String
  CodeBuildDockerImage:
    Type: String
    Default: aws/codebuild/standard:4.0
    Description: Default AWS CodeBuild image for Ubuntu 18.04

Conditions:
  IsTest: !Equals [!Ref EnvironmentName, test]    

Resources:
  EcsDeploymentServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${EnvironmentName}-${ApplicationName}-EcsDeploymentServiceRole
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Resource: '*'
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents               
                  - ec2:CreateNetworkInterface
                  - ec2:DescribeDhcpOptions
                  - ec2:DescribeNetworkInterfaces
                  - ec2:DeleteNetworkInterface
                  - ec2:DescribeSubnets
                  - ec2:DescribeSecurityGroups
                  - ec2:DescribeVpcs
                  - ec2:CreateNetworkInterfacePermission                   
                  - ssm:GetParameters
                  - ssm:GetParameter             
                  - ssm:PutParameter
                  - s3:GetObject
                  - s3:PutObject
                  - s3:GetObjectVersion                  
                  - secretsmanager:GetResourcePolicy
                  - secretsmanager:GetSecretValue
                  - secretsmanager:DescribeSecret
                  - secretsmanager:ListSecretVersionIds
                  - ecr:*
                  - ecs:*
                  - lambda:UpdateFunctionCode         

  EcsCopyImageCodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub ${EnvironmentName}-${ApplicationName}-EcsCopyImageCodeBuildProject
      Source:
        Type: CODEPIPELINE
        BuildSpec: !Sub CloudFormation/CodePipeline/${ApplicationName}/${EnvironmentName}-${ApplicationName}-build-specs.yml        
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Type: LINUX_CONTAINER
        Image: !Ref CodeBuildDockerImage
        PrivilegedMode: true
        EnvironmentVariables:
          - Name: ENVIRONMENT_NAME
            Value: !Ref EnvironmentName
          - Name: AWS_ACCOUNT_ID
            Value: !Ref AWS::AccountId
          - Name: AWS_REGION
            Value: !Ref AWS::Region
      ServiceRole: !GetAtt EcsDeploymentServiceRole.Arn
      VpcConfig: 
        SecurityGroupIds:
          - Fn::ImportValue : !Sub ${EnvironmentName}-PrivateSecurityGroup
        Subnets:
          - Fn::ImportValue : !Sub ${EnvironmentName}-PrivateSubnet1
          - Fn::ImportValue : !Sub ${EnvironmentName}-PrivateSubnet2
        VpcId: 
          Fn::ImportValue : !Sub ${EnvironmentName}-VPCId        

  LambdaCodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub ${EnvironmentName}-${ApplicationName}-lambda-codebuild-project
      Source:
        Type: CODEPIPELINE
        BuildSpec: buildspec-deploy.yml
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Type: LINUX_CONTAINER
        Image: !Ref CodeBuildDockerImage
        PrivilegedMode: true
        EnvironmentVariables:
          - Name: ENVIRONMENT_NAME
            Value: !Ref EnvironmentName
          - Name: AWS_ACCOUNT_ID
            Value: !Ref AWS::AccountId
          - Name: AWS_REGION
            Value: !Ref AWS::Region
      ServiceRole: !GetAtt EcsDeploymentServiceRole.Arn
      VpcConfig: 
        SecurityGroupIds:
          - Fn::ImportValue : !Sub ${EnvironmentName}-PrivateSecurityGroup
        Subnets:
          - Fn::ImportValue : !Sub ${EnvironmentName}-PrivateSubnet1
          - Fn::ImportValue : !Sub ${EnvironmentName}-PrivateSubnet2
        VpcId: 
          Fn::ImportValue : !Sub ${EnvironmentName}-VPCId                

  CodeDeployIAMRole: 
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${EnvironmentName}-${ApplicationName}-CodeDeploy
      ManagedPolicyArns:
        - !Sub arn:${AWS::Partition}:iam::aws:policy/service-role/AWSCodeDeployRole
        - !Sub arn:${AWS::Partition}:iam::aws:policy/AWSLambdaExecute
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Resource: '*'
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents               
                  - ec2:CreateNetworkInterface
                  - ec2:DescribeDhcpOptions
                  - ec2:DescribeNetworkInterfaces
                  - ec2:DeleteNetworkInterface
                  - ec2:DescribeSubnets
                  - ec2:DescribeSecurityGroups
                  - ec2:DescribeVpcs
                  - ec2:CreateNetworkInterfacePermission                   
                  - ssm:GetParameters
                  - ssm:GetParameter             
                  - ssm:PutParameter
                  - s3:*
                  - secretsmanager:GetResourcePolicy
                  - secretsmanager:GetSecretValue
                  - secretsmanager:DescribeSecret
                  - secretsmanager:ListSecretVersionIds
                  - ecr:*
                  - ecs:*
                  - lambda:UpdateFunctionCode             
                  - codeconnections:UseConnection,
                  - codeconnections:GetConnection
                  - codeconnections:ListConnections
                  - codeconnections:TagResource
                  - codeconnections:ListTagsForResource
      AssumeRolePolicyDocument: 
        Version: 2012-10-17
        Statement: 
          - Effect: Allow
            Principal: 
              Service: 
                - 'codedeploy.amazonaws.com'
            Action: 
              - 'sts:AssumeRole'          

  CodePipelineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: [codepipeline.amazonaws.com]
            Action: ['sts:AssumeRole']
      Policies:
        - PolicyName: CodePipelinePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'codecommit:*'
                  - 'codedeploy:*'
                  - 'codeconnections:*'
                  - 'code-connections:*'
                  - 'codestar-connections:UseConnection'
                  - 'lambda:*'
                  - 's3:*'
                  - 'sns:*'
                  - 'cloudwatch:*'
                  - 'codebuild:BatchGetBuilds'
                  - 'codebuild:StartBuild'
                  - 'iam:PassRole'
                  - 'codecommit:GetRepository'
                  - 'appconfig:StartDeployment'
                  - 'appconfig:GetDeployment'
                  - 'appconfig:StopDeployment'
                Resource: '*'              

  EcsServicePipelineTest:
    Type: AWS::CodePipeline::Pipeline
    Condition: IsTest
    Properties:
      Name: !Sub ${EnvironmentName}-${ApplicationName}-web-service
      #RoleArn: !Sub arn:${AWS::Partition}:iam::${AWS::AccountId}:role/service-role/${EnvironmentName}-${ApplicationName}-CodePipelineServiceRoleq
      RoleArn: !GetAtt CodePipelineRole.Arn
      Stages:
        - Name: Source
          Actions:
          - Name: Source
            InputArtifacts: []
            ActionTypeId:
              Category: Source
              Owner: AWS
              Version: 1
              Provider: CodeStarSourceConnection
            Configuration:
              FullRepositoryId: 'sdenison/dynamo'
              BranchName: test
              ConnectionArn: !Sub 'arn:${AWS::Partition}:codestar-connections:${AWS::Region}:${AWS::AccountId}:connection/ada190bf-b12b-4f2b-9256-26d082a23814'
            OutputArtifacts:
              - Name: SourceCode
            RunOrder: 1
        - Name: Deploy
          Actions:
          - Name: DeployEcs
            ActionTypeId:
              Category: Build
              Owner: AWS
              Provider: CodeBuild
              Version: '1'
            InputArtifacts:
              - Name: SourceCode
            Configuration:
              ProjectName: !Ref EcsCopyImageCodeBuildProject
            RunOrder: 10
          - Name: DeployLambda
            ActionTypeId:
              Category: Build
              Owner: AWS
              Provider: CodeBuild
              Version: '1'
            InputArtifacts:
              - Name: SourceCode
            Configuration:
              ProjectName: !Ref LambdaCodeBuildProject 
            RunOrder: 10                 
      ArtifactStore:
        Type: S3
        Location: !Sub ${EnvironmentName}-${ApplicationName}-codepipeline



